?gl
?factor
str(gl)
iris
mean(iris["Sepal.Length",,,, "virginica"])
mean(iris["Sepal.Length", "virginica"])
mean(iris["Sepal.Length", "virginica"], na.rm= T)
data_irirs <- iris
data_iris <- iris
data_iris[, "virginica"]
mean(iris[iris$Species == "virginica",]$Sepal.Length)
?mtcars
mtcars
?with
mean(mtcars[mtcars$cyl==4, ]$hp)
mean(mtcars[mtcars$cyl==8, ]$hp)
avg2 <- mean(mtcars[mtcars$cyl==8, ]$hp)
avg1 <- mean(mtcars[mtcars$cyl==4, ]$hp)
avg2-avg1
debug(ls)
ls
with(mtcars, tapply(mpg, cyl, mean))
ls()
exit()
data <- airquality
fac <- factor(data)
?factor
fact <- as.factor(data)
?gl
split(data)
split(data, 5)
data
s <- split(data, data$month)
s <- split(data, data$Month)
s
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
lapply(s, colMeans(data[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
?interaction
f1 <- gl(2, 5)
f2 <- gl(5, 2)
interaction(f1, f2, lex.order= TRUE)
attributes(mean)
attributes(interaction)
split(airquality, airquality$130)
split(airquality, airquality$Ozone)
interaction(f1, f1, lex.order= TRUE)
interaction(f2, f1, lex.order= TRUE)
c <- interaction(f2, f1, lex.order= TRUE)
c
?warning
?invisible
?load
?save
install.packages(c("crayon", "dplyr", "manipulate", "plyr", "rmarkdown", "rversions", "scales"))
install.packages("shiny")
?solve
m
m <- matrix(1:20, byrow = TRUE)
m
m <- matrix(1:20, nrow = 5, byrow = TRUE)
m
message("getting cached data")
m
makeCacheMatrix(x)
?$
##makeCacheMatrix(x)
##cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set = set, get = get, setmatrix = setmatrix, getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
m <- x$getmatrix()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
matrix <- x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m ## Return a matrix that is the inverse of 'x'
}
##x <- matrix(1:20, nrow = 5, byrow = TRUE)
##makeCacheMatrix(x)
##cacheSolve(x)
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2)
exit()
x <- matrix(c(2,3,-1,4), nrow = 2, byrow = FALSE)
x
library("swirl")
rm(list=ls())
swirl()
my_name <- c(my_char, "Miracle")
my_name
paste(my_name, collapse = ' ')
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), 1:3, sep = ' ')
paste(1:3, c("X", "Y", "Z"), sep = ' ')
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[o]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrows = 4, byrow = TRUE)
my_matrix2 <- matrix(1:20, nrows = 4)
my_matrix2 <- matrix(1:20, nrow = 4, byrow = TRUE)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames) <- my_data
my_data <- colnames(cnames)
colnames(my_data) <- cnames
my_data
exit()
info()
main()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
F & F
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE,
| FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints)
which(TRUE)
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My First function')
boring_function('My first function')
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x*4}, c(8, 4, 0))
evaluate(function(x){x*4}, c(8, 4, 0))[1]
evaluate(function(x){x+1}, 6)[1]
evaluate(function(x){x[1]}, c(8, 4, 0)
exit
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
info()
bye()
str(rpois)
rpoise(5, 2)
rpois(5, 2)
rpois(34, 2)
?set.seed
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(rnorm(1))
rnorm(5)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x + e
summary(y)
plot(x, y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x + e
summaryy)
summary(y)
plot(y)
plot(x, y)
plot(y, x)
plot(x)
plot(x, y)
?plot
plot(x, y, type = "l")
library(swirl)
swirl()
submit()
submit()
telegram("Hey Swirl!")
submit()
submit()
submit()
submit()
submit()
play()
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[[c(1,1)]]
adjective <- args[[c(1,2)]]
noun <- args[[c(1,3)]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("New York", "mobs of", "CCTV Cameras")
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[[1]]
adjective <- args[[2]]
noun <- args[[3]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("New York", "mobs of", "CCTV Cameras")
nxt()
submit()
mad_libs("New York", "mobs of", "CCTV Cameras")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
flags$anime
flags$animate
tabble(flags$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
getwd()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, replace = TRUE, prob = (0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = (0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <-
exit
flips2 <- sample()
flips2 <- rbinom(100, size = 100, prob= 0.7)
flips2 <- rbinom(100, size = 1, prob= 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(10)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t)
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.localeconv()
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
install.packages("lubridate")
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars$dist, cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, subtitle = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
check <- function(state, outcome, data)
{
disease <- c("heart attack", "heart failure", "pneumonia")
if(is.element(state, data$State) != TRUE)
{
print("Invalid State")
break
}
if(is.element(outcome, disease) != TRUE)
{
print("Invalid outcome")
break
}
}
best <- function(state, outcome)
{
fileread <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
dataset <- fileread
check(state, outcome, dataset)
if(outcome == 'heart attack')
{
##temp <- dataset["Hospital Name", "State" = state, "Hospital 30-Day Death (Mortality) Rates from Heart Attack"]
temp <- dataset[dataset$State == state, c(2, 11)]
temp2 <- as.numeric(temp[[2]])
minimum <- min(temp2, na.rm = TRUE)
good_hospital <- temp[temp[[2]]== as.character(minimum), 1]
good_hospital
}
else if(outcome == 'heart failure')
{
temp <- dataset[dataset$State == state, c(2, 17)]
temp2 <- as.numeric(temp[[2]])
minimum <- min(temp2, na.rm = TRUE)
good_hospital <- temp[temp[[2]]== as.character(minimum), 1]
good_hospital
}
else
{
temp <- dataset[dataset$State == state, c(2, 23)]
temp2 <- as.numeric(temp[[2]])
minimum <- min(temp2, na.rm = TRUE)
good_hospital <- temp[temp[[2]]== as.character(minimum), 1]
good_hospital
}
}
setwd("E:/Coursera/R Programming/Programming Assignment Coursera/Assignment Three/ProgAssignment3-data")
best("TX", "heart attack")
best("TX", "heart att")
